/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package View;

import Controller.DataController;
import Controller.DataControllerImp;
import Model.Course;
import Model.Registering;
import Model.Student;
import Model.Subject;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Administrator
 */
public class HomeFRM extends javax.swing.JFrame implements ActionListener {

    /**
     * Creates new form HomeFRM
     */
    private DataController dataController;
    private List<Subject> subjects;
    private DefaultTableModel tableModelSubject;

    private List<Student> students;
    private DefaultTableModel tableModelStudent;
    
    private List<Registering> registerings;
    private DefaultTableModel tableModelRegistering;
    
    private List<Course> courses;
    private DefaultTableModel tableModelCourse;

    private int indexStudent;
    private int indexSubject;
    private int indexRegistering;

    public HomeFRM() {
        initComponents();
        setLocationRelativeTo(null);
        addActionListener();
        addButtonGroup();
        tableModelSubject = (DefaultTableModel) tableSubject.getModel();
        tableModelStudent = (DefaultTableModel) tableStudent.getModel();
        tableModelRegistering = (DefaultTableModel) tableRegistering.getModel();
        tableModelCourse= (DefaultTableModel) tableCourse.getModel();
        dataController = new DataControllerImp();
        loadData();
        showData();
        indexSubject = -1;
        indexStudent = -1;
        indexRegistering=-1;
        setSubjectID();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupSortStudent = new javax.swing.ButtonGroup();
        buttonGroupSearchSubject = new javax.swing.ButtonGroup();
        buttonGroupSortSubject = new javax.swing.ButtonGroup();
        buttonGroupSreachStudent = new javax.swing.ButtonGroup();
        jProgressBar1 = new javax.swing.JProgressBar();
        buttonGroupRegistering = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        rbSortByLessonDESC = new javax.swing.JRadioButton();
        rbSortByLessonASC = new javax.swing.JRadioButton();
        rbSortByNameASC = new javax.swing.JRadioButton();
        rbSortByNameDESC = new javax.swing.JRadioButton();
        jPanel16 = new javax.swing.JPanel();
        rbSearchByName = new javax.swing.JRadioButton();
        rbSearchByLesson = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        txtSearchByName = new javax.swing.JTextField();
        txtFromLesson = new javax.swing.JTextField();
        txtToLesson = new javax.swing.JTextField();
        btnSearchSubject = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableSubject = new javax.swing.JTable();
        btnAddSubject = new javax.swing.JButton();
        btnEditSubject = new javax.swing.JButton();
        btnDeleteSubject = new javax.swing.JButton();
        btnRefreshSubject = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        btnAddStudent = new javax.swing.JButton();
        btnEditStudent = new javax.swing.JButton();
        jPanel11 = new javax.swing.JPanel();
        rbSortStudentByNameASC = new javax.swing.JRadioButton();
        rbSortStudentByNameDESC = new javax.swing.JRadioButton();
        rbSortStudentByIdASC = new javax.swing.JRadioButton();
        btnDeleteStudent = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        rbSearchStudentByName = new javax.swing.JRadioButton();
        rbSearchStudentByID = new javax.swing.JRadioButton();
        txtSearchStudentByName = new javax.swing.JTextField();
        txtSearchStudentByID = new javax.swing.JTextField();
        btnSearchStudent = new javax.swing.JButton();
        rbSearchStudentByMajor = new javax.swing.JRadioButton();
        txtSearchStudentByMajor = new javax.swing.JTextField();
        jScrollPane5 = new javax.swing.JScrollPane();
        tableStudent = new javax.swing.JTable();
        btnRefreshStudent = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        comboRegistering = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        rbSearchRegisteringByName = new javax.swing.JRadioButton();
        rbSearchRegisteringByTime = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtRegisteringName = new javax.swing.JTextField();
        txtRegisteringFrom = new javax.swing.JTextField();
        txtRegisteringTo = new javax.swing.JTextField();
        btnSearchRegistering = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableRegistering = new javax.swing.JTable();
        btnRefreshRegistering = new javax.swing.JButton();
        btnAddRegistering = new javax.swing.JButton();
        btnDeleteRegistering = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        createCourse = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableCourse = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel15.setBorder(javax.swing.BorderFactory.createTitledBorder("Sắp xếp môn học"));

        rbSortByLessonDESC.setText("Số tiết giảm dần");

        rbSortByLessonASC.setText("Số tiết tăng dần");

        rbSortByNameASC.setText("Tên môn từ z-a");

        rbSortByNameDESC.setText("Tên môn từ a-z");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(rbSortByLessonDESC)
                    .addComponent(rbSortByLessonASC))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortByNameASC)
                    .addComponent(rbSortByNameDESC))
                .addGap(35, 35, 35))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortByLessonDESC)
                    .addComponent(rbSortByNameASC))
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortByLessonASC)
                    .addComponent(rbSortByNameDESC))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel16.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm môn học"));

        rbSearchByName.setText("Theo tên gần đúng");

        rbSearchByLesson.setText("Theo số tiết học");

        jLabel7.setText("Từ:");

        jLabel8.setText("Đến:");

        btnSearchSubject.setText("Tìm");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(rbSearchByName)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchByName)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearchSubject))
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(rbSearchByLesson)
                        .addGap(30, 30, 30)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 13, Short.MAX_VALUE)
                        .addComponent(txtFromLesson, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(txtToLesson, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchByName)
                    .addComponent(txtSearchByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchSubject))
                .addGap(21, 21, 21)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchByLesson)
                    .addComponent(jLabel7)
                    .addComponent(jLabel8)
                    .addComponent(txtFromLesson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtToLesson, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        tableSubject.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã môn", "Tên môn", "Số tiết", "Thể loại"
            }
        ));
        jScrollPane4.setViewportView(tableSubject);

        btnAddSubject.setText("Thêm môn học");

        btnEditSubject.setText("Sửa môn học");

        btnDeleteSubject.setText("Xóa môn học");

        btnRefreshSubject.setText("Làm mới");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 39, Short.MAX_VALUE)
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(71, 71, 71)
                .addComponent(btnRefreshSubject)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnAddSubject)
                .addGap(89, 89, 89)
                .addComponent(btnEditSubject)
                .addGap(79, 79, 79)
                .addComponent(btnDeleteSubject)
                .addGap(74, 74, 74))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnDeleteSubject)
                    .addComponent(btnEditSubject)
                    .addComponent(btnAddSubject)
                    .addComponent(btnRefreshSubject))
                .addGap(21, 21, 21))
        );

        jTabbedPane1.addTab("QUẢN LÝ MÔN HỌC", jPanel1);

        btnAddStudent.setText("Thêm sinh viên");

        btnEditStudent.setText("Sửa sinh viên");

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder("Sắp xếp sinh viên"));

        rbSortStudentByNameASC.setText("Tên tăng dần");

        rbSortStudentByNameDESC.setText("Tên giảm dần");

        rbSortStudentByIdASC.setText("Mã sinh viên từ a-z");

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortStudentByIdASC)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(rbSortStudentByNameASC)
                        .addComponent(rbSortStudentByNameDESC)))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(rbSortStudentByNameASC)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addComponent(rbSortStudentByNameDESC)
                .addGap(18, 18, 18)
                .addComponent(rbSortStudentByIdASC)
                .addContainerGap())
        );

        btnDeleteStudent.setText("Xóa sinh viên");

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder("Tìm kiếm sinh viên"));

        rbSearchStudentByName.setText("Theo tên gần đúng");

        rbSearchStudentByID.setText("Theo mã sinh viên gần đúng");

        btnSearchStudent.setText("Tìm");

        rbSearchStudentByMajor.setText("Theo chuyên ngành");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSearchStudentByID)
                    .addComponent(rbSearchStudentByMajor)
                    .addComponent(rbSearchStudentByName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtSearchStudentByName)
                    .addComponent(txtSearchStudentByID)
                    .addComponent(txtSearchStudentByMajor, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSearchStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchStudentByName)
                    .addComponent(txtSearchStudentByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchStudentByID)
                    .addComponent(txtSearchStudentByID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchStudent))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchStudentByMajor)
                    .addComponent(txtSearchStudentByMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tableStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Họ tên", "Ngày sinh", "Địa chỉ", "Email", "Lớp", "Chuyên ngành"
            }
        ));
        jScrollPane5.setViewportView(tableStudent);

        btnRefreshStudent.setText("Làm mới");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane5)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addComponent(btnRefreshStudent)
                .addGap(78, 78, 78)
                .addComponent(btnAddStudent)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnEditStudent)
                .addGap(78, 78, 78)
                .addComponent(btnDeleteStudent)
                .addGap(66, 66, 66))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 284, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnRefreshStudent)
                        .addComponent(btnAddStudent))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnDeleteStudent)
                        .addComponent(btnEditStudent)))
                .addGap(20, 20, 20))
        );

        jTabbedPane1.addTab("QUẢN LÝ SINH VIÊN", jPanel2);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Sắp xếp và tìm kiếm bảng đăng kí"));

        jLabel1.setText("Sắp xếp bảng đăng kí theo:");

        comboRegistering.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tên tăng dần từ a-z", "Tên giảm dần từ z-a", "Thời gian đăng kí sớm - muộn", "Thời gian đăng kí muộn - sớm", " " }));

        rbSearchRegisteringByName.setText("Tìm kiếm theo tên sinh viên:");

        rbSearchRegisteringByTime.setText("Tìm kiếm theo thời gian đăng kí:");

        jLabel2.setText("Nhập tên sinh viên:");

        jLabel3.setText("Từ ngày:");

        jLabel4.setText("Đến ngày:");

        btnSearchRegistering.setText("Tìm kiếm");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 691, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(51, 51, 51)
                                .addComponent(comboRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbSearchRegisteringByName)
                            .addComponent(rbSearchRegisteringByTime))
                        .addGap(65, 65, 65)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addGap(36, 36, 36)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtRegisteringName)
                            .addComponent(txtRegisteringFrom)
                            .addComponent(txtRegisteringTo, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSearchRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32))))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(23, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(comboRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchRegisteringByName)
                    .addComponent(jLabel2)
                    .addComponent(txtRegisteringName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchRegisteringByTime)
                    .addComponent(jLabel3)
                    .addComponent(txtRegisteringFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearchRegistering))
                .addGap(23, 23, 23)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtRegisteringTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tableRegistering.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Tên sinh viên", "Lớp", "Mã môn", "Tên môn ", "Thời gian đăng kí"
            }
        ));
        jScrollPane1.setViewportView(tableRegistering);

        btnRefreshRegistering.setText("Làm mới");

        btnAddRegistering.setText("Thêm đăng kí");

        btnDeleteRegistering.setText("Xóa đăng kí");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(125, 125, 125)
                .addComponent(btnRefreshRegistering)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 127, Short.MAX_VALUE)
                .addComponent(btnAddRegistering)
                .addGap(125, 125, 125)
                .addComponent(btnDeleteRegistering)
                .addGap(125, 125, 125))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefreshRegistering)
                    .addComponent(btnAddRegistering)
                    .addComponent(btnDeleteRegistering))
                .addGap(24, 24, 24))
        );

        jTabbedPane1.addTab("QUẢN LÝ ĐĂNG KÍ", jPanel3);

        createCourse.setText("Lập danh sách lớp");

        tableCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Lớp học phần", "Mã sinh viên", "Tên sinh viên", "Lớp sinh viên", "Mã môn", "Tên môn", "Thời gian đăng kí"
            }
        ));
        jScrollPane2.setViewportView(tableCourse);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(313, 313, 313)
                .addComponent(createCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jScrollPane2)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(createCourse)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(23, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("PHÂN LỚP", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFRM.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFRM().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddRegistering;
    private javax.swing.JButton btnAddStudent;
    private javax.swing.JButton btnAddSubject;
    private javax.swing.JButton btnDeleteRegistering;
    private javax.swing.JButton btnDeleteStudent;
    private javax.swing.JButton btnDeleteSubject;
    private javax.swing.JButton btnEditStudent;
    private javax.swing.JButton btnEditSubject;
    private javax.swing.JButton btnRefreshRegistering;
    private javax.swing.JButton btnRefreshStudent;
    private javax.swing.JButton btnRefreshSubject;
    private javax.swing.JButton btnSearchRegistering;
    private javax.swing.JButton btnSearchStudent;
    private javax.swing.JButton btnSearchSubject;
    private javax.swing.ButtonGroup buttonGroupRegistering;
    private javax.swing.ButtonGroup buttonGroupSearchSubject;
    private javax.swing.ButtonGroup buttonGroupSortStudent;
    private javax.swing.ButtonGroup buttonGroupSortSubject;
    private javax.swing.ButtonGroup buttonGroupSreachStudent;
    private javax.swing.JComboBox<String> comboRegistering;
    private javax.swing.JButton createCourse;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton rbSearchByLesson;
    private javax.swing.JRadioButton rbSearchByName;
    private javax.swing.JRadioButton rbSearchRegisteringByName;
    private javax.swing.JRadioButton rbSearchRegisteringByTime;
    private javax.swing.JRadioButton rbSearchStudentByID;
    private javax.swing.JRadioButton rbSearchStudentByMajor;
    private javax.swing.JRadioButton rbSearchStudentByName;
    private javax.swing.JRadioButton rbSortByLessonASC;
    private javax.swing.JRadioButton rbSortByLessonDESC;
    private javax.swing.JRadioButton rbSortByNameASC;
    private javax.swing.JRadioButton rbSortByNameDESC;
    private javax.swing.JRadioButton rbSortStudentByIdASC;
    private javax.swing.JRadioButton rbSortStudentByNameASC;
    private javax.swing.JRadioButton rbSortStudentByNameDESC;
    private javax.swing.JTable tableCourse;
    private javax.swing.JTable tableRegistering;
    private javax.swing.JTable tableStudent;
    private javax.swing.JTable tableSubject;
    private javax.swing.JTextField txtFromLesson;
    private javax.swing.JTextField txtRegisteringFrom;
    private javax.swing.JTextField txtRegisteringName;
    private javax.swing.JTextField txtRegisteringTo;
    private javax.swing.JTextField txtSearchByName;
    private javax.swing.JTextField txtSearchStudentByID;
    private javax.swing.JTextField txtSearchStudentByMajor;
    private javax.swing.JTextField txtSearchStudentByName;
    private javax.swing.JTextField txtToLesson;
    // End of variables declaration//GEN-END:variables

    @Override
    public void actionPerformed(ActionEvent e) {
        Object obj = e.getSource();
        if (obj.equals(btnAddSubject)) {
            addNewSubject();
        } else if (obj.equals(btnEditSubject)) {
            editSubject();
        } else if (obj.equals(btnDeleteSubject)) {
            deleteSubject();
        } else if (obj.equals(btnRefreshSubject)) {
            refreshSubject();
        } else if (obj.equals(rbSortByNameASC)
                || obj.equals(rbSortByLessonASC)
                || obj.equals(rbSortByNameDESC)
                || obj.equals(rbSortByLessonDESC)) {
            sortSubject(obj);
        } else if (obj.equals(rbSearchByLesson)
                || obj.equals(rbSearchByName)) {
            setUprbSearchSubject(obj);
        } else if (obj.equals(btnSearchSubject)) {
            searchSubject();
        } else if (obj.equals(btnAddStudent)) {
            addNewStudent();
        } else if (obj.equals(btnEditStudent)) {
            editStudent();
        } else if (obj.equals(btnDeleteStudent)) {
            deleteStudent();
        } else if (obj.equals(btnRefreshStudent)) {
            refreshStudent();
        } else if (obj.equals(rbSortStudentByIdASC)
                || obj.equals(rbSortStudentByNameASC)
                || obj.equals(rbSortStudentByNameDESC)) {
            sortStudent(obj);
        } else if (obj.equals(rbSearchStudentByID)
                || obj.equals(rbSearchStudentByMajor)
                || obj.equals(rbSearchStudentByName)) {
            setUprbSearchStudent(obj);
        } else if (obj.equals(btnSearchStudent)) {
            searchStudent();
        } else if(obj.equals(btnAddRegistering)){
            addNewRegistering();
        } else if(obj.equals(btnRefreshRegistering)){
            refreshRegistering();
        } else if(obj.equals(btnDeleteRegistering)){
            deleteRegistering();
        } else if (obj.equals(comboRegistering)){
            sortRegistering();
        } else if (obj.equals(rbSearchRegisteringByName)
                || obj.equals(rbSearchRegisteringByTime)) {
            setUprbSearchRegistering(obj);
        } else if (obj.equals(btnSearchRegistering)) {
            searchRegistering();
        } else if (obj.equals(createCourse)){
            createCourse();
        }
    }

    private void addButtonGroup() {
        //SUBJECT
        buttonGroupSortSubject.add(rbSortByLessonDESC);
        buttonGroupSortSubject.add(rbSortByLessonASC);
        buttonGroupSortSubject.add(rbSortByNameASC);
        buttonGroupSortSubject.add(rbSortByNameDESC);

        buttonGroupSearchSubject.add(rbSearchByLesson);
        buttonGroupSearchSubject.add(rbSearchByName);

        //STUDENT
        buttonGroupSortStudent.add(rbSortStudentByNameDESC);
        buttonGroupSortStudent.add(rbSortStudentByNameASC);
        buttonGroupSortStudent.add(rbSortStudentByIdASC);

        buttonGroupSreachStudent.add(rbSearchStudentByID);
        buttonGroupSreachStudent.add(rbSearchStudentByMajor);
        buttonGroupSreachStudent.add(rbSearchStudentByName);
        
        //REGISTERING
        buttonGroupRegistering.add(rbSearchRegisteringByName);
        buttonGroupRegistering.add(rbSearchRegisteringByTime);
    }

    private void addActionListener() {
        //SUBJECT
        rbSearchByLesson.addActionListener(this);
        rbSearchByName.addActionListener(this);
        rbSortByNameASC.addActionListener(this);
        rbSortByNameDESC.addActionListener(this);
        rbSortByLessonASC.addActionListener(this);
        rbSortByLessonDESC.addActionListener(this);

        btnSearchSubject.addActionListener(this);
        btnAddSubject.addActionListener(this);
        btnRefreshSubject.addActionListener(this);
        btnEditSubject.addActionListener(this);
        btnDeleteSubject.addActionListener(this);

        //STUDENT
        rbSortStudentByNameDESC.addActionListener(this);
        rbSortStudentByNameASC.addActionListener(this);
        rbSortStudentByIdASC.addActionListener(this);

        rbSearchStudentByID.addActionListener(this);
        rbSearchStudentByMajor.addActionListener(this);
        rbSearchStudentByName.addActionListener(this);

        btnRefreshStudent.addActionListener(this);
        btnAddStudent.addActionListener(this);
        btnEditStudent.addActionListener(this);
        btnDeleteStudent.addActionListener(this);
        btnSearchStudent.addActionListener(this);
        
        //REGISTERING
        rbSearchRegisteringByName.addActionListener(this);
        rbSearchRegisteringByTime.addActionListener(this);
        btnSearchRegistering.addActionListener(this);
        btnRefreshRegistering.addActionListener(this);
        btnAddRegistering.addActionListener(this);
        btnDeleteRegistering.addActionListener(this);
        comboRegistering.addActionListener(this);
        
        createCourse.addActionListener(this);
    }

    private void addNewSubject() {
        AddNewSubjectDialog addNewSubjectDialog = new AddNewSubjectDialog(this,
                rootPaneCheckingEnabled);
        addNewSubjectDialog.setVisible(true);
    }

    void CallBackAddSubjects(Subject s) {
        subjects.add(s);
        showSubject(s);
        saveData(DataController.SUBJECT);
    }

    private void loadData() {
        subjects = dataController.readFromFile(DataController.SUBJECT_FILE);
        students = dataController.readFromFile(DataController.STUDENT_FILE);
        registerings = dataController.readFromFile(DataController.REGISTERING_FILE);
    }

    private void saveData(int choice) {
        switch (choice) {
            case DataController.SUBJECT:
                dataController.writeToFile(subjects, DataController.SUBJECT_FILE);
                break;
            case DataController.STUDENT:
                dataController.writeToFile(students, DataController.STUDENT_FILE);
                break;
            case DataController.REGISTERING:
                dataController.writeToFile(registerings, DataController.REGISTERING_FILE);
                break;
        }
    }

    private void showData() {
        showSubjects(subjects);
        showStudents(students);
        showRegisterings(registerings);
    }

    private void showSubject(Subject s) {
        Object[] row = new Object[]{
            s.getSubjectID(), s.getSubjectName(),
            s.getTotalLesson(), s.getSubjectType()
        };
        tableModelSubject.addRow(row);
    }

    private void showSubjects(List<Subject> subjects) {
        tableModelSubject.setRowCount(0);
        for (Subject s : subjects) {
            showSubject(s);
        }
    }

    private void editSubject() {
        indexSubject = tableSubject.getSelectedRow();
        if (indexSubject > -1) {
            Subject s = subjects.get(indexSubject);
            EditSubjectDialog editSubject = new EditSubjectDialog(this,
                    rootPaneCheckingEnabled, s);
            editSubject.setVisible(true);
        } else {
            String msg = "Bạn cần chọn vào dòng cần sửa";
            showMessage(msg);
        }
        indexSubject = -1;

    }

    private void showMessage(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    void CallBackEditSubjects(Subject s) {
        subjects.set(indexSubject, s);
        tableModelSubject.removeRow(indexSubject);
        tableModelSubject.insertRow(indexSubject, new Object[]{
            s.getSubjectID(), s.getSubjectName(),
            s.getTotalLesson(), s.getSubjectType()
        });
        saveData(DataController.SUBJECT);
    }

    private void setSubjectID() {
        if (subjects.size() > 0) {
            Subject.setId(subjects.get(subjects.size() - 1).getSubjectID() + 1);
        }
    }

    private void deleteSubject() {
        indexSubject = tableSubject.getSelectedRow();
        if (indexSubject > -1) {
            int option = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn chắc chắn muốn xóa môn học này");
            if (option == JOptionPane.YES_OPTION) {
                subjects.remove(indexSubject);
                tableModelSubject.removeRow(indexSubject);
                saveData(DataController.SUBJECT);
            }

        } else {
            String msg = "Bạn cần chọn vào dòng cần xóa";
            showMessage(msg);
        }
        indexSubject = -1;
    }

    private void sortSubject(Object obj) {
        if (obj.equals(rbSortByLessonASC)) {
            dataController.sortSubjectByLessonASC(subjects);
        } else if (obj.equals(rbSortByLessonDESC)) {
            dataController.sortSubjectByLessonDESC(subjects);
        } else if (obj.equals(rbSortByNameASC)) {
            dataController.sortSubjectByNameASC(subjects);
        } else if (obj.equals(rbSortByNameDESC)) {
            dataController.sortSubjectByNameDESC(subjects);
        }
        showSubjects(subjects);
    }

    private void setUprbSearchSubject(Object obj) {
        if (obj.equals(rbSearchByName)) {
            txtToLesson.setEnabled(false);
            txtFromLesson.setEnabled(false);
            txtSearchByName.setEnabled(true);

        } else if (obj.equals(rbSearchByLesson)) {
            txtFromLesson.setEnabled(true);
            txtToLesson.setEnabled(true);
            txtSearchByName.setEnabled(false);
        }
    }

    private void searchSubject() {
        if (!rbSearchByLesson.isSelected() && !rbSearchByName.isSelected()) {
            String msg = "Bạn cần chọn vào mục cần tìm kiếm";
            showMessage(msg);
        } else if (rbSearchByName.isSelected()) {
            if (txtSearchByName.getText().isEmpty()) {
                String msg = "Bạn cần nhập tên cần tìm kiếm";
                showMessage(msg);
            } else {
                List<Subject> ssByName;
                ssByName = dataController.searchSubjectByName(subjects,
                        txtSearchByName.getText());
                showSubjects(ssByName);
            }
        } else {
            if (txtFromLesson.getText().isEmpty()
                    && txtToLesson.getText().isEmpty()) {
                String msg = "Bạn cần nhập đầy đủ số tiết cần tìm kiếm";
                showMessage(msg);
            } else {
                List<Subject> ssByLesson;
                ssByLesson = dataController.searchSubjectByLesson(subjects,
                        Integer.parseInt(txtFromLesson.getText()),
                        Integer.parseInt(txtToLesson.getText()));
                showSubjects(ssByLesson);
            }
        }
    }

    private void refreshSubject() {
        buttonGroupSearchSubject.clearSelection();
        buttonGroupSortSubject.clearSelection();
        String empty = "";
        txtFromLesson.setText(empty);
        txtToLesson.setText(empty);
        txtSearchByName.setText(empty);
        subjects.clear();
        subjects = dataController.readFromFile(DataController.SUBJECT_FILE);
        showSubjects(subjects);

    }

    private void addNewStudent() {
        AddNewStudentDialog addNewStudentDialog = new AddNewStudentDialog(this,
                rootPaneCheckingEnabled, students);
        addNewStudentDialog.setVisible(true);
    }

    void CallBackAddStudent(Student s) {
        students.add(s);
        showStudent(s);
        saveData(DataController.STUDENT);
    }

    private void showStudent(Student s) {
        Object[] row = new Object[]{
            s.getStudentId(), s.getFullName(), s.getDob(), s.getAddress(),
            s.getEmail(), s.getStudentClass(), s.getMajor()
        };
        tableModelStudent.addRow(row);
    }

    private void showStudents(List<Student> students) {
        tableModelStudent.setRowCount(0);
        for (Student student : students) {
            showStudent(student);
        }
    }

    private void editStudent() {
        indexStudent = tableStudent.getSelectedRow();
        if (indexStudent > -1) {
            Student s = students.get(indexStudent);
            EditStudentDialog editStudent = new EditStudentDialog(this,
                    rootPaneCheckingEnabled, s);
            editStudent.setVisible(true);
        } else {
            String msg = "Bạn cần chọn vào dòng cần sửa";
            showMessage(msg);
        }
        indexStudent = -1;
    }

    void CallBackEditStudent(Student s) {
        students.set(indexStudent, s);
        tableModelStudent.removeRow(indexStudent);
        tableModelStudent.insertRow(indexStudent, new Object[]{
            s.getStudentId(), s.getFullName(), s.getDob(), s.getAddress(),
            s.getEmail(), s.getStudentClass(), s.getMajor()
        });
        saveData(DataController.STUDENT);
    }

    private void deleteStudent() {
        indexStudent = tableStudent.getSelectedRow();
        if (indexStudent > -1) {
            int option = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn chắc chắn muốn xóa sinh viên này");
            if (option == JOptionPane.YES_OPTION) {
                students.remove(indexStudent);
                tableModelStudent.removeRow(indexStudent);
                saveData(DataController.STUDENT);
            }

        } else {
            String msg = "Bạn cần chọn vào dòng cần xóa";
            showMessage(msg);
        }
        indexStudent = -1;
    }

    private void refreshStudent() {
        buttonGroupSreachStudent.clearSelection();
        buttonGroupSortStudent.clearSelection();
        String empty = "";
        txtSearchStudentByID.setText(empty);
        txtSearchStudentByMajor.setText(empty);
        txtSearchStudentByName.setText(empty);
        txtSearchStudentByID.setEnabled(true);
        txtSearchStudentByMajor.setEnabled(true);
        txtSearchStudentByName.setEnabled(true);
        students.clear();
        students = dataController.readFromFile(DataController.STUDENT_FILE);
        showStudents(students);
    }

    private void sortStudent(Object obj) {
        if (obj.equals(rbSortStudentByIdASC)) {
            dataController.sortStudentByIdASC(students);
        } else if (obj.equals(rbSortStudentByNameASC)) {
            dataController.sortStudentByNameASC(students);
        } else if (obj.equals(rbSortStudentByNameDESC)) {
            dataController.sortStudentByNameDESC(students);
        }
        showStudents(students);
    }

    private void setUprbSearchStudent(Object obj) {
        if (obj.equals(rbSearchStudentByID)) {
            txtSearchStudentByMajor.setEnabled(false);
            txtSearchStudentByName.setEnabled(false);
            txtSearchStudentByID.setEnabled(true);

        } else if (obj.equals(rbSearchStudentByMajor)) {
            txtSearchStudentByMajor.setEnabled(true);
            txtSearchStudentByName.setEnabled(false);
            txtSearchStudentByID.setEnabled(false);
        } else if (obj.equals(rbSearchStudentByName)) {
            txtSearchStudentByMajor.setEnabled(false);
            txtSearchStudentByName.setEnabled(true);
            txtSearchStudentByID.setEnabled(false);
        }
    }

    private void searchStudent() {
        if (!rbSearchStudentByID.isSelected() && !rbSearchStudentByMajor
                .isSelected() && !rbSearchStudentByName.isSelected()) {
            String msg = "Bạn cần chọn vào mục cần tìm kiếm";
            showMessage(msg);
        } else if (rbSearchStudentByID.isSelected()) {
            if (txtSearchStudentByID.getText().isEmpty()) {
                String msg = "Bạn cần nhập id cần tìm kiếm";
                showMessage(msg);
            } else {
                List<Student> ssById;
                ssById = dataController.searchStudentById(students,
                        txtSearchStudentByID.getText());
                showStudents(ssById);
            }
        } else if (rbSearchStudentByMajor.isSelected()) {
            if (txtSearchStudentByMajor.getText().isEmpty()) {
                String msg = "Bạn cần nhập chuyên ngành cần tìm kiếm";
                showMessage(msg);
            } else {
                List<Student> ssByMajor;
                ssByMajor = dataController.searchStudentByMajor(students,
                        txtSearchStudentByMajor.getText());
                showStudents(ssByMajor);
            }
        } else {
            if (txtSearchStudentByName.getText().isEmpty()) {
                String msg = "Bạn cần nhập tên sinh viên cần tìm kiếm";
                showMessage(msg);
            } else {
                List<Student> ssByName;
                ssByName = dataController.searchStudentByName(students,
                        txtSearchStudentByName.getText());
                showStudents(ssByName);
            }
        }
    }

    private void showRegisterings(List<Registering> registerings) {
        tableModelRegistering.setRowCount(0);
        for (Registering r : registerings) {
            showRegistering(r);
        }
        
    }
    private void showRegistering(Registering r) {
        Object[] row = new Object[]{
            r.getStudent().getStudentId(),r.getStudent().getFullName(),
            r.getStudent().getStudentClass(),r.getSubject().getSubjectID(),
            r.getSubject().getSubjectName(),r.getTimeRegistering()
        };
        tableModelRegistering.addRow(row);
    }

    private void addNewRegistering() {
        AddNewRegisteringDialog dialog = new AddNewRegisteringDialog(this,
                rootPaneCheckingEnabled,subjects,students,registerings);
        dialog.setVisible(true);
    }

    void CallBackAddRegistering(Registering r) {
        registerings.add(r);
        showRegistering(r);
        saveData(DataController.REGISTERING);
    }

    private void refreshRegistering() {
        buttonGroupRegistering.clearSelection();
        comboRegistering.setSelectedIndex(0);
        String empty = "";
        txtRegisteringName.setText(empty);
        txtRegisteringFrom.setText(empty);
        txtRegisteringTo.setText(empty);
        txtRegisteringName.setEnabled(true);
        txtRegisteringFrom.setEnabled(true);
        txtRegisteringTo.setEnabled(true);
        registerings.clear();
        registerings = dataController.readFromFile(DataController.REGISTERING_FILE);
        showRegisterings(registerings);
    }

    private void deleteRegistering() {
        indexRegistering = tableRegistering.getSelectedRow();
        if (indexRegistering > -1) {
            int option = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn chắc chắn muốn xóa bản đăng kí này");
            if (option == JOptionPane.YES_OPTION) {
                registerings.remove(indexRegistering);
                tableModelRegistering.removeRow(indexRegistering);
                saveData(DataController.REGISTERING);
            }

        } else {
            String msg = "Bạn cần chọn vào dòng cần xóa";
            showMessage(msg);
        }
        indexRegistering = -1;
    }

    private void sortRegistering() {
        int option = comboRegistering.getSelectedIndex();
        switch(option){
            case 0:
                dataController.sortRegisteringByNameASC(registerings);
                break;
            case 1:
                dataController.sortRegisteringByNameDESC(registerings);
                break;
            case 2:
                dataController.sortRegisteringByTimeASC(registerings);
                break;
            case 3:
                dataController.sortRegisteringByTimeDESC(registerings);
                break;
        }
        showRegisterings(registerings);
    }

    private void setUprbSearchRegistering(Object obj) {
        if (obj.equals(rbSearchRegisteringByName)) {
            txtRegisteringName.setEnabled(true);
            txtRegisteringFrom.setEnabled(false);
            txtRegisteringTo.setEnabled(false);

        } else if (obj.equals(rbSearchRegisteringByTime)) {
            txtRegisteringName.setEnabled(false);
            txtRegisteringFrom.setEnabled(true);
            txtRegisteringTo.setEnabled(true);
        }
    }

    private void searchRegistering() {
        if (!rbSearchRegisteringByName.isSelected() &&
                !rbSearchRegisteringByTime.isSelected()) {
            String msg = "Bạn cần chọn vào mục cần tìm kiếm";
            showMessage(msg);
        } else if (rbSearchRegisteringByName.isSelected()) {
            if (txtRegisteringName.getText().isEmpty()) {
                String msg = "Bạn cần nhập tên sinh viên cần tìm kiếm";
                showMessage(msg);
            } else {
                List<Registering> ssByName;
                ssByName = dataController.searchRegisteringByName(registerings,
                        txtRegisteringName.getText());
                showRegisterings(ssByName);
            }
        } else {
            if (txtRegisteringFrom.getText().isEmpty()
                    && txtRegisteringTo.getText().isEmpty()) {
                String msg = "Bạn cần nhập đầy đủ trường ngày cần tìm kiếm";
                showMessage(msg);
            } else {
                String regex = "dd/MM/yyyy";
                SimpleDateFormat dateFormat = new SimpleDateFormat(regex);
                try {
                    Date from = dateFormat.parse(txtRegisteringFrom.getText());
                    Date to = dateFormat.parse(txtRegisteringTo.getText());
                    List<Registering> ssByDay;
                ssByDay = dataController.searchRegisteringByTime(registerings,
                        from,to);
                showRegisterings(ssByDay);
                } catch (ParseException ex) {
                    String msg = "Vui lòng nhập đúng định dang dd/MM/yyyy.\n"
                            + "Ví dụ: 27/09/2000";
                    showMessage(msg);
                }
                
                
            }
        }
    }

    private void createCourse() {
        courses = dataController.createCourse(registerings, subjects);
        showCourses(courses);
    }
    private void showCourse(Course course,SimpleDateFormat dateFormat ) {
        for (Registering r : course.getRegistering()) {
            Object[] row = new Object[]{
                course.getName(),r.getStudent().getStudentId(),r.getStudent()
                .getFullName(),r.getStudent().getStudentClass(),
                r.getSubject().getSubjectID(),r.getSubject().getSubjectName(),
                dateFormat.format(r.getTimeRegistering())
            };
            tableModelCourse.addRow(row);
        }
    }

    private void showCourses(List<Course> courses) {
        String empty = "_";
        SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        tableModelCourse.setRowCount(0);
        for (Course c : courses) {
            showCourse(c,dateFormat);
            tableModelCourse.addRow(new Object[]{
                empty,empty,empty,empty,empty,empty,empty
            });
        }
    }
}
